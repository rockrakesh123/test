Perfect!
You want me to create a task that uses Terraform to deploy an application — like a full profession


---

Task: Deploy a Python Flask Application on AWS using Terraform


---

Objective:

Use Terraform to provision the infrastructure on AWS to host a Python Flask application. The app will be deployed on an EC2 instance behind an Application Load Balancer (ALB) for high availability.


---

Terraform Project Requirements:


---

App Details:

Simple Flask App:

from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello World from Terraform Deployed Flask App!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)


---

Folder Structure:

terraform-flask-deploy/
│
├── main.tf
├── variables.tf
├── outputs.tf
├── provider.tf
└── userdata.sh (script to install Flask on EC2)


---

Terraform Files:


---

provider.tf

provider "aws" {
  region = "us-east-1"
}


---

variables.tf

variable "vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "public_subnet_cidrs" {
  default = ["10.0.1.0/24", "10.0.2.0/24"]
}

variable "instance_type" {
  default = "t2.micro"
}

variable "key_name" {
  description = "SSH key to access EC2 instance"
  default     = "your-key-name"
}


---

userdata.sh

#!/bin/bash
sudo apt update -y
sudo apt install python3-pip -y
pip3 install flask
cat > /home/ubuntu/app.py <<EOF
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return "Hello World from Terraform Deployed Flask App!"
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
EOF
nohup python3 /home/ubuntu/app.py &


---

main.tf

resource "aws_vpc" "main_vpc" {
  cidr_block = var.vpc_cidr
}

resource "aws_subnet" "public_subnet" {
  count             = 2
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = element(var.public_subnet_cidrs, count.index)
  map_public_ip_on_launch = true
  availability_zone = element(data.aws_availability_zones.available.names, count.index)
}

data "aws_availability_zones" "available" {}

resource "aws_security_group" "web_sg" {
  vpc_id = aws_vpc.main_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "web_instance" {
  ami           = "ami-0fc5d935ebf8bc3bc"  # Ubuntu 22.04 AMI (update if needed)
  instance_type = var.instance_type
  subnet_id     = aws_subnet.public_subnet[0].id
  key_name      = var.key_name
  security_groups = [aws_security_group.web_sg.name]

  user_data = file("userdata.sh")

  tags = {
    Name = "FlaskAppInstance"
  }
}

resource "aws_lb" "app_lb" {
  name               = "flask-app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.web_sg.id]
  subnets            = aws_subnet.public_subnet[*].id
}

resource "aws_lb_target_group" "app_tg" {
  name     = "flask-app-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main_vpc.id
}

resource "aws_lb_listener" "app_listener" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app_tg.arn
  }
}

resource "aws_lb_target_group_attachment" "app_attach" {
  target_group_arn = aws_lb_target_group.app_tg.arn
  target_id        = aws_instance.web_instance.id
  port             = 80
}


---

outputs.tf

output "load_balancer_dns" {
  value = aws_lb.app_lb.dns_name
}


---

Steps to Execute:

1. Create a key pair if not available.


2. Replace "your-key-name" in variables.tf with your key name.


3. Run the commands:

terraform init
terraform plan
terraform apply


4. After terraform apply, note the Load Balancer DNS output.


5. Open a browser and hit the URL — you will see Hello World from Terraform Deployed Flask App!.

--
